#!/bin/bash

# MIT License
# Copyright (c) 2024 Lauri Vanhatalo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
# lint-commit-msg @{version information} (placeholder for making releases)
#
# TODO: check for leading whitespace in the subject line
# TODO: Note that IDEs are typically started from a menu or otherwise "graphically"
#   which might result in PATH not containing the entries set in the user specific
#   startup files (e.g. ~/.bashrc). This might result in lint-commit-msg not being
#   in PATH when a commit is made from within an IDE. Not sure if there's anything
#   else to do about it than mention this in the documentation.

EXIT_CODE_LINTING_ERROR=1
EXIT_CODE_USER_ERROR=2
EXIT_CODE_UNEXPECTED_ERROR=3

# Variables prefixed with
# - LCM_ belong to public API
# - _LCM_ are internal ones
_LCM_DEFAULT_SUBJECT_LINE_MIN_LENGTH=3
_LCM_DEFAULT_SUBJECT_LINE_MAX_LENGTH=60
_LCM_DEFAULT_BODY_LINE_MAX_LENGTH=72
: ${LCM_SUBJECT_LINE_MIN_LENGTH:=${_LCM_DEFAULT_SUBJECT_LINE_MIN_LENGTH}}
: ${LCM_SUBJECT_LINE_MAX_LENGTH:=${_LCM_DEFAULT_SUBJECT_LINE_MAX_LENGTH}}
: ${LCM_BODY_LINE_MAX_LENGTH:=${_LCM_DEFAULT_BODY_LINE_MAX_LENGTH}}
: ${LCM_INTERACTIVE:=auto}
_LCM_MSG_BACKUP_FILE=lint-commit-msg.MSG

# Handle aliases (true=always, false=never)
[ "${LCM_INTERACTIVE}" = "true" ] && LCM_INTERACTIVE="always"
[ "${LCM_INTERACTIVE}" = "false" ] && LCM_INTERACTIVE="never"
[ "${LCM_COLOR}" = "true" ] && LCM_COLOR="always"
[ "${LCM_COLOR}" = "false" ] && LCM_COLOR="never"

color_red="\x1B[0;31m"
color_yellow="\x1B[0;33m"
color_white_bold="\x1B[1;37m"
color_light_blue="\x1B[94m"
color_cyan="\x1B[96m"
color_reset="\x1B[m"

if [ "${LCM_COLOR}" = "always" ]
then
    :
elif [ "${LCM_COLOR}" = "never" ] || ( ! [ -t 1 ] )
then
    # LCM_COLOR=never OR stdout is not terminal -> don't use colored output
    unset color_red color_yellow color_white_bold color_light_blue color_cyan color_reset
fi

if [ "$1" = "-h" ] || [ "$1" = "--help" ]
then
    cat <<EOF
$(printf "${color_white_bold}")lint-commit-msg (LCM)$(printf "${color_reset}") checks that a Git commit message
follows a set of formatting and stylistic conventions.

  1. Separate subject from body with a blank line
  2. Limit the subject line to ~${LCM_SUBJECT_LINE_MAX_LENGTH} characters (72 is the absolute maximum)
  3. Capitalize the subject line
  4. Do not end the subject line with a period
  5. Use the imperative mood in the subject line
  6. Wrap the body at 72 characters
  7. Use the body to explain what and why, not how

See $(printf "${color_light_blue}")https://cbea.ms/git-commit/#seven-rules$(printf "${color_reset}") for details
about the conventions and the rationale behind them.
For more detailed documentation and usage examples
visit $(printf "${color_light_blue}")https://github.com/laurivan/lint-commit-msg$(printf "${color_reset}")

EOF

    printf "${color_white_bold}Usage:${color_reset} "
    printf "${color_cyan}lint-commit-msg [<input file>|-]${color_reset}\n"
    printf "If input file is omitted or '-' read from stdin.\n"
    echo
    printf "${color_white_bold}General settings${color_reset}\n"
    cat <<EOF
  LCM_INTERACTIVE (always|never|auto, default: auto)
        LCM_COLOR (always|never|auto, default: auto)

EOF

    printf "${color_white_bold}Configuring linting rules${color_reset}\n"
    cat <<EOF
    LCM_SUBJECT_LINE_MIN_LENGTH (default: ${_LCM_DEFAULT_SUBJECT_LINE_MIN_LENGTH})
    LCM_SUBJECT_LINE_MAX_LENGTH (default: ${_LCM_DEFAULT_SUBJECT_LINE_MAX_LENGTH})
       LCM_BODY_LINE_MAX_LENGTH (default: ${_LCM_DEFAULT_BODY_LINE_MAX_LENGTH})
  LCM_SUBJECT_LINE_PREFIX_REGEX (default: "")
   LCM_SUBJECT_LINE_PREFIX_HELP (default: "")

EOF

    printf "${color_white_bold}Ignoring linting rules (set to \"true\" to apply)${color_reset}\n"
    cat <<EOF
  LCM_IGNORE_ALL
  LCM_IGNORE_SUBJECT_LINE_TOO_SHORT
  LCM_IGNORE_SUBJECT_LINE_TOO_LONG
  LCM_IGNORE_SUBJECT_LINE_ENDS_IN_PERIOD
  LCM_IGNORE_SUBJECT_NOT_CAPITALIZED
  LCM_IGNORE_INVALID_SUBJECT_LINE_PREFIX
  LCM_IGNORE_SUBJECT_MOOD
  LCM_IGNORE_BODY_LINE_TOO_LONG
  LCM_IGNORE_CONTAINS_TABS
  LCM_IGNORE_TRAILING_WHITESPACE
  LCM_IGNORE_MISSING_FINAL_EOL
  LCM_IGNORE_2ND_LINE_NOT_BLANK
  LCM_IGNORE_LINE_COUNT_IS_2

EOF

    printf "${color_white_bold}Example invocations${color_reset}\n"
    printf "Lint a commit message in message.txt. Use maximum body line length of 80.\n"
    printf "  ${color_cyan}LCM_BODY_LINE_MAX_LENGTH=80 lint-commit-msg message.txt${color_reset}\n"
    printf ""
    printf "Allow tab characters and long lines in the message body. In this\n"
    printf "example lint-commit-msg is used in Git commit-msg hook.\n"
    printf "  ${color_cyan}LCM_IGNORE_CONTAINS_TABS=true LCM_IGNORE_BODY_LINE_TOO_LONG=true git commit${color_reset}\n"
    printf ""
    printf "Lint an existing commit message in a Git repository. Don't use colored output.\n"
    printf "lint-commit-msg reads its input (i.e. commit message) from stdin.\n"
    printf "  ${color_cyan}git log -n1 --format=format:%%B HEAD | LCM_COLOR=never lint-commit-msg${color_reset}\n"
    exit 0
fi

# Print everything to stderr.
exec 1>&2

# unexpected_error can be called if there's an unexpected error or an error
# in the script's internal logic i.e. there's a bug (which should of course
# never happen). The error message will give instructions on how to skip
# lint-commit-msg so that the user doesn't have to use git commit's --no-verify
# which would skip all the hooks entirely.
unexpected_error() {
    local msg="$1"
    cat <<EOF

ERROR: lint-commit-msg (LCM), ${msg}

There was an unexpected error in lint-commit-msg. To bypass linting
the commit message, set LCM_IGNORE_ALL to 'true' and retry.
For example,
  LCM_IGNORE_ALL=true git commit ...
EOF
    exit "${EXIT_CODE_UNEXPECTED_ERROR}"
}

if [ "${LCM_IGNORE_ALL}" = "true" ]
then
    printf "${color_yellow}WARN${color_reset}: Not linting commit message (LCM_IGNORE_ALL set to 'true')\n"
    exit 0
fi

# Validate variables: misspelled variables with LCM_ prefix and variable values.
# Do this only after (possibly) printing the usage instructions and after checking
# whether LCM_IGNORE_ALL is used to bypass lint-commit-msg altogether.
invalid_vars=false
for lcm_var in "${!LCM_@}" "${!lcm_@}"
do
    case "${lcm_var}" in
        LCM_IGNORE_2ND_LINE_NOT_BLANK|LCM_IGNORE_ALL|LCM_IGNORE_BODY_LINE_TOO_LONG|LCM_IGNORE_CONTAINS_TABS|LCM_IGNORE_INVALID_SUBJECT_LINE_PREFIX|LCM_IGNORE_LINE_COUNT_IS_2|LCM_IGNORE_MISSING_FINAL_EOL|LCM_IGNORE_SUBJECT_LINE_ENDS_IN_PERIOD|LCM_IGNORE_SUBJECT_NOT_CAPITALIZED|LCM_IGNORE_SUBJECT_LINE_TOO_LONG|LCM_IGNORE_SUBJECT_LINE_TOO_SHORT|LCM_IGNORE_SUBJECT_MOOD|LCM_IGNORE_SUBJECT_NOT_CAPITALIZED|LCM_IGNORE_TABS|LCM_IGNORE_TRAILING_WHITESPACE)
            [[ "${!lcm_var}" =~ true|false ]] || {
                echo "lint-commit-msg: ERROR: invalid value, ${lcm_var}='${!lcm_var}' (should be true/false)"
                invalid_vars=true
            }
            ;;
        LCM_SUBJECT_LINE_PREFIX_HELP|LCM_SUBJECT_LINE_PREFIX_REGEX)
            :
            ;;
        LCM_COLOR|LCM_INTERACTIVE)
            [[ "${!lcm_var}" =~ always|never|auto|true|false ]] || {
                echo "lint-commit-msg: ERROR: invalid value, ${lcm_var}='${!lcm_var}' (should be always (aka true), never (aka false), or auto)"
                invalid_vars=true
            }
            ;;
        LCM_SUBJECT_LINE_MAX_LENGTH|LCM_SUBJECT_LINE_MIN_LENGTH|LCM_BODY_LINE_MAX_LENGTH)
            integer_regex='^[1-9][0-9]*$'
            [[ "${!lcm_var}" =~ ${integer_regex} ]] || {
                echo "lint-commit-msg: ERROR: invalid value, ${lcm_var}='${!lcm_var}' (should be a positive integer)"
                invalid_vars=true
            }
            ;;
        *)
            echo "lint-commit-msg: ERROR: unrecognized configuration variable: ${lcm_var}"
            invalid_vars=true
          ;;
    esac
done
${invalid_vars} && exit "${EXIT_CODE_USER_ERROR}"

# If no input file is given, use '-' which (when passed to 'cat') will make
# this script work also when the commit message is passed in via stdin.
input_file="${1--}"
if [ "${input_file}" != "-" ] && ! [ -r "${input_file}" ]
then
    echo "lint-commit-msg: ERROR: no such file or not readable: '${input_file}'"
    exit "${EXIT_CODE_USER_ERROR}"
fi

# ------------------------------------------------------------------------------
# First we need to clean up the "raw" commit message received by the commit-msg hook.
# Background information: commit-msg hook is called with one argument, the name
# of the file that contains the commit message. However, that message is "cleaned
# up" by git before actually making the commit. In other words, the message seen
# by commit-msg hook is not necessarily what will finally be recorded as the commit
# message. This is problematic if the hook aborts the commit because of something
# (in the commit message) that would have been fixed by the cleanup.
#
# How the cleanup is actually done depends on the cleanup mode (for details see
# --cleanup option of git commit). The cleanup mode can be selected using
#   - an option to git commit: git commit --cleanup=<mode> ...
#   - a git config variable 'commit.cleanup' which can also be given
#     per command: git -c commit.cleanup=<mode> commit ...
# The option overrides the configuration variable if both are present.
#
# We want to lint the "post-cleanup" commit message but unfortunately the hook
# receives the "raw" one. So, before the linting we can try to apply the same
# cleanup as git is going to apply. We can examine the configuration variable
# (commit.cleanup) but unfortunately the commit-msg hook has no way of knowing
# which (if any) cleanup mode was given using the --cleanup option.
#
# However, (in my experience) --cleanup is very rarely given by users which makes
# it possible to infer the cleanup mode that will be used. See especially jsharp's
# answer in https://stackoverflow.com/questions/16272849/use-gits-commit-message-cleanup-mode-from-commit-msg-hook
#
# So, infer the cleanup mode being used:
config_cleanup_mode=$(git config --get commit.cleanup)
if [ -z "${config_cleanup_mode}" ] || [ "${config_cleanup_mode}" = "default" ]
then
    if [ "${GIT_EDITOR}" = ":" ]
    then
        # Commit message is not edited -> clean up mode is most probably "whitespace"
        cleanup_mode="whitespace"
    else
        # Commit message is edited -> clean up mode is most probably "strip"
        cleanup_mode="strip"
    fi
else
    cleanup_mode="${config_cleanup_mode}"
fi

if [ "${_LCM_DEBUG}" = "true" ]
then
    echo "config_cleanup_mode: '${config_cleanup_mode}'"
    echo "       cleanup_mode: '${cleanup_mode}'"
    echo "         GIT_EDITOR: '${GIT_EDITOR}'"
fi

# To clean up the raw commit message exactly the same way as git does, create
# a dummy commit in a throwaway git repository and pass the inferred cleanup
# mode to 'git commit' (with --cleanup).
tmp_dir=""
exit_hook() {
    if [ -d "${tmp_dir}" ]
    then
        [ "${_LCM_DEBUG}" = "true" ] && echo "Deleting temporary directory"
        rm -rf "${tmp_dir}"
    fi
    [ "${_LCM_DEBUG}" = "true" ] && echo "Finished exit hook"
}
trap exit_hook EXIT
tmp_dir=$(mktemp -d --tmpdir lcm.XXX)
[ -d "${tmp_dir}" ] || {
     unexpected_error "failed to create temporary directory"
}

raw_input_file="${tmp_dir}/raw-commit-msg"
cleaned_input_file="${tmp_dir}/cleaned-commit-msg"

while true; do
    # Copy the input to a temporary file (remember that the input
    # might be stdin in which case it can be read only once).
    cat "${input_file}" > "${raw_input_file}"

    (
        # Unset Git environment variables (in this subshell) to ensure
        # the cleanup is done "fully isolated" from the Git repository
        # where we're making the actual commit.
        unset "${!GIT@}"

        cd "${tmp_dir}" || exit
        git init --initial-branch=main --quiet repo || exit
        cd repo || exit
        git -c "user.name=John Doe" -c "user.email=john.doe@example.com" \
            commit --quiet --allow-empty --allow-empty-message \
            --file="${raw_input_file}" --cleanup="${cleanup_mode}" || exit
        git log --format=format:%B -n 1 HEAD > "${cleaned_input_file}" || exit
    ) || unexpected_error "failed to clean up commit message"

    if [ "${_LCM_DEBUG}" = "true" ]
    then
        echo "------------ raw message -----------------"
        cat -A "${raw_input_file}"
        echo "---------- cleaned message ---------------"
        cat -A "${cleaned_input_file}"
        echo "------------------------------------------"
    fi

    # Define error types and create data structures. For each error type
    #  - create an error type variable (int): e.g. error_subject_line_too_long=2
    #  - set error count for that type to zero: e.g. error_counts[2]=0
    #  - set name of an environment variable that can be used to suppress checking
    #    for that error type: e.g. ignore_vars[2]=LCM_IGNORE_SUBJECT_LINE_TOO_LONG
    # Note that using ordinary arrays (with numeric keys) is intentional. Many Mac
    # users still have Bash version 3 which doesn't support associative arrays.
    error_counts=()
    ignore_vars=()
    error_type_index=0
    for error_type in \
        all \
            subject_line_too_short \
            subject_line_too_long \
            subject_line_ends_in_period \
            subject_not_capitalized \
            invalid_subject_line_prefix \
            subject_mood \
            body_line_too_long \
            contains_tabs \
            trailing_whitespace \
            missing_final_eol \
            2nd_line_not_blank \
            line_count_is_2
    do
        eval "error_${error_type}=${error_type_index}"
        error_counts[${error_type_index}]=0
        ignore_vars[${error_type_index}]="LCM_IGNORE_$(echo "${error_type}" | tr a-z A-Z)"
        ((error_type_index++))
    done

    if [ "${_LCM_DEBUG}" = "true" ]
    then
        echo "Error types"
        declare -p ${!error_*} | grep --color=never '^declare --'
        echo "Data structures"
        declare -p error_counts ignore_vars
    fi

    # error_output will contain the lines that are printed in the end if there
    # were any linting errors. There are two types of items in the array:
    # error messages and the contents of corresponding input file lines. For example,
    #   error_output[0]="line 1: Subject line ends in a period (.)"
    #   error_output[1]="line 1: Subject line too short"
    #   error_output[2]="My subj."
    #   error_output[3]="line 3: trailing whitespace"
    #   error_output[4]="Oops, there's space after me. "
    error_output=()

    repo_root="$(git rev-parse --show-toplevel 2>/dev/null)"
    # Deduce whether lint-commit-msg is invoked as part of (commit-msg) hook
    # or executed "standalone" to e.g. lint an existing commit message.
    is_committing() {
        # This heuristic seems to work... but it wouldn't hurt to have
        # something more robust (and documented) for this.
        [ -n "${repo_root}" ] &&
            { [ -n "${GIT_DIR}" ] || [ -n "${GIT_INDEX_FILE}" ]; }
    }

    # stdout_is_terminal is used to decide if we should activate
    # interactive mode when LCM_INTERACTIVE is set to 'auto'.
    stdout_is_terminal() {
        [ -t 1 ]
    }

    # input_is_writable_file is used to decide whether the user is offered
    # the possibility to edit an invalid commit message (if in interactive mode).
    input_is_writable_file() {
        [ -f "${input_file}" ] && [ -w "${input_file}" ]
    }

    # append_error adds a message about a (linting) error to
    # the list of errors that will be reported to the user.
    append_error() {
        [ $# -eq 3 ] ||
            unexpected_error "${FUNCNAME}: wrong number of arguments ($#): $(printf "<%s>" "$@")"
        local error_type="$1"
        local error_msg="$2"

        # Can be an empty string if the error is not related to any particular line.
        local line_no="$3"

        local ignore_var=${ignore_vars[${error_type}]}
        if [ "${!ignore_var}" = "true" ]
        then
            # TODO: should this output be removed (or made configurable)?
            echo "lint-commit-msg: (intentionally) ignoring error (${ignore_var}=true)"
            return
        fi

        # Error type and line number should both be integers.
        [ "${error_type}" -eq "${error_type}" ] 2>/dev/null ||
            unexpected_error "${FUNCNAME}: invalid error_type: '${error_type}'"
        if [ -n "${line_no}" ]
        then
            [ "${line_no}" -eq "${line_no}" ] 2>/dev/null ||
                unexpected_error "${FUNCNAME}: invalid line number: '${line_number}'"
            error_output+=( "$(printf "line %d: %s\n" "${line_no}" "${error_msg}")" )
        else
            error_output+=( "${error_msg}" )
        fi

        error_counts[${error_type}]=$(( ${error_counts[${error_type}]} + 1 ))
        error_counts[${error_all}]=$(( ${error_counts[${error_all}]} + 1 ))
    }

    append_erroneous_line() {
        [ $# -eq 1 ] ||
            unexpected_error "${FUNCNAME}: wrong number of arguments ($#): $(printf "<%s>" "$@")"
        # Add leading whitespace which can be used to distinguish erroneous lines from error messages.
        error_output+=( "  $1" )
    }

    check_subject_line() {
        local line="$1"

        # Ends in period check
        [[ ${line} =~ "."$ ]] &&
            append_error "${error_subject_line_ends_in_period}" "subject line ends in a period (.)" 1

        # Min length check
        [ "${#line}" -lt "${LCM_SUBJECT_LINE_MIN_LENGTH}" ] &&
            append_error \
                "${error_subject_line_too_short}" \
                "subject line too short (${#line}), min length is ${LCM_SUBJECT_LINE_MIN_LENGTH}" \
                1

        # Max length check
        [ "${#line}" -gt "${LCM_SUBJECT_LINE_MAX_LENGTH}" ] &&
            append_error \
                "${error_subject_line_too_long}" \
                "subject line too long (${#line}), max length is ${LCM_SUBJECT_LINE_MAX_LENGTH}" \
                1

        # Prefix regex check
        local subject="${line}"
        if [ -n "${LCM_SUBJECT_LINE_PREFIX_REGEX}" ]
        then
            local prefix_regex="^${LCM_SUBJECT_LINE_PREFIX_REGEX}"
            [[ "${line}" =~ ${prefix_regex} ]]
            case $? in
                0)
                    local match_length="${#BASH_REMATCH[0]}"
                    subject="${line:match_length}"
                    ;;
                1)
                    local error_msg
                    if [ -n "${LCM_SUBJECT_LINE_PREFIX_HELP}" ]
                    then
                        printf -v error_msg "${LCM_SUBJECT_LINE_PREFIX_HELP}"
                    else
                        error_msg="subject line does not match regex: '${prefix_regex}'"
                    fi
                    append_error \
                        "${error_invalid_subject_line_prefix}" \
                        "${error_msg}" \
                        1
                    return
                    ;;
                2)
                    echo "lint-commit-msg: ERROR: \$LCM_SUBJECT_LINE_PREFIX_REGEX syntactically incorrect: '${prefix_regex}'"
                    exit "${EXIT_CODE_USER_ERROR}"
                    ;;
                *)
                    unexpected_error "unexpected error executing subject line prefix regex"
                    ;;
            esac
        fi
        # NOTE! If the regex didn't match the subject line we don't know which part of the subject line to
        # check for capitalization and mood. So, continue here only if the regex matched to avoid raising
        # errors that only confuse the user.

        # Capitalization check
        [[ ${subject} =~ ^[a-z] ]] &&
            append_error \
                "${error_subject_not_capitalized}" \
                "subject${LCM_SUBJECT_LINE_PREFIX_REGEX:+ \"${subject}\"} not capitalized" \
                1

        # Subject mood check
        local subject_first_word=${subject%% *}
        shopt -s nocasematch
        if [[ "${subject_first_word}" =~ (ed|ing|[^s]s)$ ]] ||
               [[ "${subject_first_word}" =~ ^(wrote|made|hid|sent|gave|threw|bound|took)$ ]]
        then
            local invalid_suffix
            case "${BASH_REMATCH[0]}" in
                ed|ing)
                    invalid_suffix="${BASH_REMATCH[0]}"
                    ;;
                [^s]s)
                    # This special handling is needed to not flag verbs that end in 's'
                    # in their imperative mood e.g. "suppress". As far as I can think
                    # such verbs always end in double 's' (miss, kiss, bless).
                    invalid_suffix="s"
                    ;;
                *)
                    # ${subject_first_word} is one of the detected irregular
                    # verbs in past tense (e.g. "wrote")
                    invalid_suffix="ed"
            esac

            append_error \
                "${error_subject_mood}" \
                "verb '${subject_first_word}' in the subject not in imperative mood,
          use for example 'Add' instead of 'Add${invalid_suffix}'" \
                1
        fi
        shopt -u nocasematch
    }

    # Note that an empty commit message has 0 lines and thus the following
    # while loop body will not be executed (and no errors will be reported).
    line_no=1
    while IFS= read -r line
    do
        error_count=${error_counts[${error_all}]}

        # Special checks for the first two lines
        case "${line_no}" in
            1)
                # Subject line
                check_subject_line "${line}"
                ;;
            2)
                # Blank line separating subject and body
                [ -n "${line}" ] &&
                    append_error "${error_2nd_line_not_blank}" "should be blank (separates subject line and body)" "${line_no}"
                ;;
        esac

        # Checks for all lines.
        if [[ ${line} =~ $'\t' ]]
        then
            append_error "${error_contains_tabs}" "tab character(s) found" "${line_no}"
        fi

        ends_in_space_or_tab="[ "$'\t'']$'
        if [[ ${line} =~ ${ends_in_space_or_tab} ]]
        then
            append_error "${error_trailing_whitespace}" "trailing whitespace" "${line_no}"
        fi

        # check_subject_line already checks the length of the first line
        if [ "${line_no}" -ne 1 ] && [ "${#line}" -gt "${LCM_BODY_LINE_MAX_LENGTH}" ]
        then
            append_error \
                "${error_body_line_too_long}" \
                "body line too long (${#line}), max length is ${LCM_BODY_LINE_MAX_LENGTH}" \
                "${line_no}"
        fi

        # Append the invalid line so that it will be printed below the errors it contains.
        [ ${error_counts[${error_all}]} -gt ${error_count} ] && append_erroneous_line "${line}"
        ((line_no++))
    done < "${cleaned_input_file}"

    # Note that git cleans up the commit message that the user supplies
    # (see --cleanup option of git commit for details). So, normally
    # (practically always) we don't have to worry about missing final
    # end of line (EOL), trailing empty lines, etc. but we'll check them
    # here anyways.
    if true
    then
        [ -s "${cleaned_input_file}" ] && [ -n "$(tail -c 1 "${cleaned_input_file}")" ] && {
            append_error "${error_missing_final_eol}" \
                         "missing EOL at end of commit message" \
                         ""
        }

        line_count=$(cat "${cleaned_input_file}" | wc -l)
        line_count_is_2_msg="commit message should be either
  - a single (subject) line OR
  - subject line + blank line + body"
        [ "${line_count}" -eq 2 ] &&
            append_error "${error_line_count_is_2}" "${line_count_is_2_msg}" ""
    fi

    # Print the errors as well as instructions how to retry while ignoring some (or all) errors.
    if [ ${error_counts[${error_all}]} -gt 0 ]
    then
        printf "${color_red}%s${color_reset}\n" "ERROR: commit message not properly formatted"
        for output in "${error_output[@]}"
        do
            if [ "${output:0:1}" = " " ]
            then
                # Commit message lines can be detected by the leading
                # whitespace added by append_erroneous_line.
                printf "%s\n" "${output}"
            else
                printf -- "${color_red}- %s${color_reset}\n" "${output}"
            fi
        done
        echo

        if [ "${LCM_INTERACTIVE}" = "always" ] ||
               { [ "${LCM_INTERACTIVE}" = "auto" ] && stdout_is_terminal && is_committing; }
        then
            while true;
            do
                # stdin in commit-msg hook is set to /dev/null by Git so
                # use another file descriptor for reading user input.
                exec 5</dev/tty
                if input_is_writable_file
                then
                    printf "Continue anyway? [yes/no/edit] "
                else
                    printf "Continue anyway? [yes/no] "
                fi
                reply=""
                read -u 5 reply
                prompt_exit_code=$?
                exec 5>&-

                # Exit if user presses Ctrl-D (EOF)
                [ "${prompt_exit_code}" -eq 0 ] || exit "${EXIT_CODE_LINTING_ERROR}"

                if [ "${reply}" = "yes" ] || [ "${reply}" = "no" ] || { input_is_writable_file && [ "${reply}" = edit ]; }
                then
                    break
                else
                    echo "Invalid response!"
                fi
            done

            if [ "${reply}" = "yes" ]
            then
                exit 0
            elif [ "${reply}" = "edit" ]
            then
                if [ -n "${GIT_EDITOR}" ] && [ "${GIT_EDITOR}" != ":" ]
                then
                    chosen_editor="${GIT_EDITOR}"
                else
                    chosen_editor="${VISUAL:-${EDITOR}}"
                fi
                if [ -z "${chosen_editor}" ]
                then
                    chosen_editor=nano
                    echo "No editor set in \$GIT_EDITOR, \$VISUAL, or \$EDITOR."
                    echo "Opening default editor '${chosen_editor}'..."
                    sleep 3
                fi
                ${chosen_editor} "${input_file}" ||
                    {
                        echo "ERROR: failed to edit commit message using '${chosen_editor}'"
                        sleep 3
                    }
                echo
                continue
            fi
        fi

        if is_committing
        then
            echo "Aborting commit!"

            # Tell the user where they can retrieve the commit message so they don't lose it
            # (they may have written it in an editor opened by 'git commit' or 'git merge').
            # Note that we could simply point the user to .git/COMMIT_EDITMSG but that wouldn't
            # help when running 'git merge'. There's .git/MERGE_MSG which is used with 'git merge'
            # but unfortunately that file won't have the commit message after an aborted
            # (merge) commit when the commit message is written interactively (in the editor
            # opened by Git). So, it seems we're forced to use our own custom backup file
            # for the commit message.
            cp "${raw_input_file}" "${repo_root}/.git/${_LCM_MSG_BACKUP_FILE}"
            echo "Commit message saved in .git/${_LCM_MSG_BACKUP_FILE}"
        fi

        # Keep the error output shorter
        if false
        then
            cat <<EOF

To ignore the errors set the corresponding
environment variable(s) to 'true' and retry:
EOF
            for i in ${!error_counts[@]}
            do
                if [ "${error_counts[${i}]}" -gt 0 ]
                then
                    printf "  %s\n" "${ignore_vars[${i}]}"
                    example_error_var="${ignore_vars[${i}]}"
                fi
            done
            printf "For example\n"
            printf "  ${example_error_var}=true git commit ...\n"
        fi

        exit "${EXIT_CODE_LINTING_ERROR}"
    fi

    # Don't leave commit message backups (from earlier runs) lying around.
    if is_committing && [ -f "${repo_root}/.git/${_LCM_MSG_BACKUP_FILE}" ]
    then
        rm "${repo_root}/.git/${_LCM_MSG_BACKUP_FILE}"
    fi

    echo "lint-commit-msg: commit message OK"
    exit 0
done # while true; do
