#!/usr/bin/env bash

. "${TEST_FILE_DIR}/common"

before_all() {
    cat > msg.txt <<EOF
invalid commit message (subject not capitalized)
EOF
    export LCM_COLOR=never
}

test_never() {
    export LCM_INTERACTIVE=never
    call lint-commit-msg ../msg.txt
    expect_linting_error
    stdout_not_contains "Continue anyway?"
}

test_false() {
    export LCM_INTERACTIVE=false
    call lint-commit-msg ../msg.txt
    expect_linting_error
    stdout_not_contains "Continue anyway?"
}

# lint-commit-msg is run with stdout (and stderr) redirected
# to files. Interactive mode should not be triggered because
# LCM_INTERACTIVE is not defined i.e. it is effectively 'auto'.
test_default_not_terminal() {
    unset LCM_INTERACTIVE # Ensure this is unset.
    call lint-commit-msg ../msg.txt
    expect_linting_error
    stdout_not_contains "Continue anyway?"
}

test_default_within_terminal_within_hook() {
    unset LCM_INTERACTIVE # Ensure this is unset.

    init_git_repo
    cat > .git/hooks/commit-msg <<'EOF'
#!/bin/sh

lint-commit-msg "$1" || exit
EOF
    chmod u+x .git/hooks/commit-msg

    cat > expect.cmd <<EOF
set timeout -1
spawn git commit --file ../msg.txt

expect "Continue anyway? "
send -- "no\n"

expect eof
EOF

    echo a > a.txt; git add a.txt

    # unbuffer makes lint-commit-msg think its stdout is terminal
    call expect expect.cmd
    # Cannot test the exit code because expect returns 0 as its exit code.
    stdout_contains "ERROR: commit message not properly formatted"
    stdout_contains "- line 1: subject not capitalized"
    stdout_contains "Continue anyway?"
    stdout_contains "Aborting commit!"
    stdout_contains "Commit message saved in .git/lint-commit-msg.MSG"
}

test_never_within_terminal() {
    export LCM_INTERACTIVE=never

    # unbuffer makes lint-commit-msg think its stdout is terminal
    call unbuffer lint-commit-msg ../msg.txt
    expect_linting_error
    stdout_contains "ERROR: commit message not properly formatted"
    stdout_contains "- line 1: subject not capitalized"
    stdout_not_contains "Continue anyway?"
}

test_always() {
    export LCM_INTERACTIVE=always

    cat > expect.cmd <<EOF
set timeout -1
spawn lint-commit-msg ../msg.txt

expect "Continue anyway? "
send -- "no\n"

expect eof
EOF

    call expect expect.cmd
    # Cannot test the exit code because expect returns 0 as its exit code.
    stdout_contains "ERROR: commit message not properly formatted"
    stdout_contains "- line 1: subject not capitalized"
    stdout_contains "Continue anyway?"
}

test_true() {
    export LCM_INTERACTIVE=true

    cat > expect.cmd <<EOF
set timeout -1
spawn lint-commit-msg ../msg.txt

expect "Continue anyway? "
send -- "no\n"

expect eof
EOF

    call expect expect.cmd
    # Cannot test the exit code because expect returns 0 as its exit code.
    stdout_contains "ERROR: commit message not properly formatted"
    stdout_contains "- line 1: subject not capitalized"
    stdout_contains "Continue anyway?"
}

test_reply_yes() {
    unset LCM_INTERACTIVE # Ensure this is unset.

    init_git_repo
    cat > .git/hooks/commit-msg <<'EOF'
#!/bin/sh

lint-commit-msg "$1" || exit
EOF
    chmod u+x .git/hooks/commit-msg

    cat > expect.cmd <<EOF
set timeout -1
spawn git commit --file ../msg.txt

expect "Continue anyway? "
send -- "yes\n"

expect eof
EOF

    echo a > a.txt; git add a.txt

    call expect expect.cmd
    # Cannot test the exit code because expect returns 0 as its exit code.
    stdout_contains "ERROR: commit message not properly formatted"
    stdout_contains "- line 1: subject not capitalized"
    stdout_contains "Continue anyway?"
    stdout_not_contains "Aborting commit!"
    stdout_not_contains "Commit message saved in .git/lint-commit-msg.MSG"
    stdout_contains "1 file changed"

    git diff --name-only --staged | grep --quiet "a\.txt" &&
        fail "a.txt should not be staged anymore"
}
