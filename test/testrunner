#!/usr/bin/env bash

sa_short_description="run unit tests written as Bash functions"
sa_long_description=(
"testrunner is a simple test runner that reads 'test suites' i.e. text files containing test cases written as Bash functions. The test case functions are named 'test_xxx'. The text file can optionally contain any combination of functions named 'before_all', 'after_all', 'before_each', and 'after_each' which are run before any test case, after all test cases, before each test case, and after each test case respectively."
"Each test case is executed in a subshell and thus variables declared or modified within a test case cannot be seen by other test cases. Variables declared in before_all function can be seen and modified by all test cases (but the modifications are not visible to other test cases)."

"testrunner creates a 'out' directory to hold resources created by test cases. For every test file a 'suite directory' is created under out directory. 'before_all' and 'after_all' are executed in the suite directory. For each test case a 'test case directory' is creatd under suite directory. 'before_each', 'after_each', and the test case function itself are executed in the test case directory."
)

log_align_level=true
SIMPLEARGS=simpleargs-v0.2.0
# -------------------------------- simpleargs --------------------------------
. "${SIMPLEARGS}" || { echo "Error loading '${SIMPLEARGS}'" >&2; exit 1; }

sa_parse "$0" \
         --fail-immediately @doc="Stop running tests as soon as a test case fails." \
         --log-level OFF,ERROR,WARN,INFO,CONFIG,FINE @varname=tmp_log_level @default=INFO \
         @doc="Log level, allowed values: @{v} (default: @{d})." \
         -o/--out-dir arg @default=out \
         @doc="Directory to hold resources created by test cases (default: @{d}); created if doesn't exist already." \
         "<test file>..." @varname=test_files @@glob "*.test" @@file \
         @doc="Test suite files with .test suffix containing test case functions."
sa_end_parse $?; sa_process "$@"; sa_end_process $?; eval "set -- ${sa_args}"
# ----------------------------------------------------------------------------

log_level=${tmp_log_level}
test_case_prefix='test_'

mkdir -p "${out_dir}"
absolute_out_dir=$(realpath "${out_dir}")
if ! [ -d "${absolute_out_dir}" ]
then
    log ERROR "Could not get absolute out dir"
    exit 1
fi

. testlib

# filter_functions() prints shell functions matching the given pattern.
# Usage:
#   filter_functions <grep arguments>
# Examples:
#   filter_functions ^test_
#   filter_functions -E 'test_(x|y)'
filter_functions() {
    declare -F | sed 's/^declare -f //' | grep "$@"
}

run_func_if_exists() {
    local func="$1"
    local file="$2"
    if [ "$(type -t "${func}")" = "function" ]
    then
        "${func}"
        local exit_code=$?
        [ "${exit_code}" -ne 0 ] && log ERROR "${file}:${func}() returned code ${exit_code}" >&3
        return "${exit_code}"
    fi
    return 0
}

EXIT_CODE_TEST_FAILURE=1
EXIT_CODE_LIFECYCLE_FUNC_FAILURE=2
run_test_file() {
    test_file="$1"
    cat "${test_file}" |
        grep -E '^(function )?test_[-A-Za-z0-9_]*' |
        sed -E -e 's/^function //' -e 's/[( ].*//' |
        sort |
        uniq --repeated |
        grep -E '.+' &&
        log ERROR "Duplicate functions in '${test_file}' (see above)" &&
        return "${EXIT_CODE_TEST_FAILURE}"
    (
        TEST_FILE="${test_file}"
        TEST_FILE_BASENAME="$(basename -s .test "${TEST_FILE}")"
        TEST_FILE_DIR="$(realpath "$(dirname "${TEST_FILE}")")"

        unset -f before_all before_each after_all after_each $(filter_functions "^${test_case_prefix}")
        . "${TEST_FILE}"
        if ! filter_functions "^${test_case_prefix}" >/dev/null # TODO: test this
        then
            log CONFIG "No test cases in ${TEST_FILE}"
            exit 0
        fi

        log CONFIG "Running ${TEST_FILE}..."
        # Create 'suite dir' and cd into it.
        test_output_dir="${out_dir}/${TEST_FILE_BASENAME}"
        rm -rf "${test_output_dir}"
        mkdir "${test_output_dir}"
        cd "${test_output_dir}"

        run_func_if_exists before_all "${TEST_FILE_BASENAME}" 3>&1 >test.log 2>&1 ||
            exit "${EXIT_CODE_LIFECYCLE_FUNC_FAILURE}"

        _SUCCESS=true
        for test_function in $(filter_functions "^${test_case_prefix}")
        do
            TEST_CASE="${test_function#${test_case_prefix}}"
            mkdir "${TEST_CASE}"
            (
                cd "${TEST_CASE}"
                TEST_CASE_DIR="${PWD}"

                # Initialize variables used by testlib functions
                lcm_test_status=0
                call_called=false
                export STDOUT="${TEST_CASE_DIR}/stdout.txt"
                export STDERR="${TEST_CASE_DIR}/stderr.txt"
                export EXIT_CODE="${TEST_CASE_DIR}/exit_code.txt"

                # Run before_each
                run_func_if_exists before_each "${TEST_FILE_BASENAME}" 3>&1 > "${TEST_CASE_DIR}/test.log" 2>&1 ||
                    exit "${EXIT_CODE_LIFECYCLE_FUNC_FAILURE}"
                # Run the actual test case function
                "${test_function}" >> "${TEST_CASE_DIR}/test.log" 2>&1
                # Run after_each
                run_func_if_exists after_each "${TEST_FILE_BASENAME}" 3>&1 >> "${TEST_CASE_DIR}/test.log" 2>&1 ||
                    exit "${EXIT_CODE_LIFECYCLE_FUNC_FAILURE}"

                log INFO "Executed ${TEST_FILE_BASENAME}.${TEST_CASE}" ""
                if [ "${lcm_test_status}" -eq 0 ]
                then
                    log_display_level=false log INFO "  OK"
                    exit 0
                else
                    log_display_level=false log ERROR "  FAIL"

                    [ "${call_called}" = "false" ] && echo "WARN: 'call' was not called as part of test case"
                    cat "${TEST_CASE_DIR}/test.log"
                    touch fail

                    # Create a symlink to the test case directory of the failing test case for quick access.
                    [ -h "${absolute_out_dir}/failed" ] && rm "${absolute_out_dir}/failed"
                    ln -s "${TEST_CASE_DIR}" "${absolute_out_dir}/failed"
                    echo

                    exit "${EXIT_CODE_TEST_FAILURE}"
                fi
            )

            test_case_exit_code=$?
            if [ "${test_case_exit_code}" -ne 0 ]
            then
                _SUCCESS=false
                [ "${fail_immediately}" = "true" ] && exit "${test_case_exit_code}"
            fi
        done
        run_func_if_exists after_all "${TEST_FILE_BASENAME}" 3>&1 >>test.log 2>&1 || exit "${EXIT_CODE_LIFECYCLE_FUNC_FAILURE}"

        [ "${_SUCCESS}" = "false" ] && exit "${EXIT_CODE_TEST_FAILURE}" || exit 0
    )
}

_ALL_SUCCESS=true
for test_file in "${test_files[@]}"
do
    run_test_file "${test_file}"
    test_file_exit_code=$?
    if [ "${test_file_exit_code}" -ne 0 ]
    then
        _ALL_SUCCESS=false
        [ "${fail_immediately}" = "true" ] && exit "${test_file_exit_code}"
    fi
done

[ "${_ALL_SUCCESS}" = "true" ]
